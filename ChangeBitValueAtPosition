namespace ChangeBitValueAtPosition
{
    using System;

    class ChangeBitValueAtPosition
    {
        static void Main()
        {
            /*We are given integer number n, value v (v=0 or 1) and a position p. Write a sequence of operators that modifies n to hold                 the value v at the position p from the binary representation of n.
	            Example: n = 5 (00000101), p=3, v=1  13 (00001101); n = 5 (00000101), p=2, v=0  1 (00000001)*/

            Console.Write("Type a number n = ");
            int n = Int32.Parse(Console.ReadLine());

            Console.Write("Type position p = ");
            int p = Int32.Parse(Console.ReadLine());

            Console.Write("Type bit value 0 or 1 v = ");
            byte v = Byte.Parse(Console.ReadLine());

            int mask = 1 << p;
            int newN = n;

            if ((n & mask) != 0 && v == 0)
            {
                newN = n ^ mask;
            }
            else if ((n & mask) != 1 && v == 1)
            {
                newN = n | mask;
            }

            Console.WriteLine("Before - {0}, after {2} position bit transformation - {1} ", n, newN, p);
        }
    }
}
